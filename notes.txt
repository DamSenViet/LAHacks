------------------------------------
DECISION MAKING: WHY DO WE NEED A SERVER?

To keep track of votes and images in live-time we needed a backend to hold the data. Specifically, we needed a webserver where we could get images from. Most servers are built as web servers, even those for iOS and Android Apps.

To get data from webservers you need issue HTTP (Hypertext Transport Protocol) requests to retrieve data.

Types of HTTP requests:
	GET (get a resource)
	POST (give server data, server processes data, and optionally gives us something back)

------------------------------------
REQUESTS AND PLATFORMS

Your browser runs JavaScript and the implementer of the browser (e.g. Google & Google Chrome) always includes methods to issue HTTP requests. In your browser the specific name of the HTTP request object is called XMLHTTPrequest (also referred to as 'xhr' by developers):

https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest

Your browser automatically comes with methods to issue these requests. Other platforms don't.

Please keep note that JavaScript itself does not come with methods nor objects to these requests.
The browser adds additional JavaScript classes and objects so that you can access the requests objects on the web at any time.
If you were to create a JavaScript app that did not run in your browser, you would not have access to requests without an external library.


You might be wondering how iOS apps and Android apps issue HTTP requests if they're not written in web languages (e.g. C++, Python, Java). Other languages have libraries that can issue HTTP requests.

For example you could use this mentioned library to issue a request to a server for an iOS app
https://stackoverflow.com/questions/24016142/how-to-make-an-http-request-in-

------------------------------------
DECISION MAKING: BACKEND CHOICE

We had several options of setting up a backend web server:
	php server
	python server (django)
	java server
	js server (Node.js)


We HAVE to use these on the frontend:
	html
	css
	js

JavaScript was meant to be a web/frontend language, not a server language. NodeJS bridges this gap and allows frontend developers to also work on backend.

We chose Node.js because it was the easiest approach. It can be set up instantaneously, it can run locally without any additional requirements aside from npm (node package manager)

Please note that using JavaScript for a large-scale web server would be a bad design decision. JavaScript run time is significantly higher than servers built in c for example.

------------------------------------

Node.JS wasn't enough. It's a framework but it doesn't actually set up the entire server for us. It just MAKES IT EASY to set up the server (you can think of Node as a just a library in that sense). To automatically setup the rest of the server we used Express and its template generator module.

Express provides us with the following files and folders:
	bin/www (actually starting the server)
	app.js (process of starting up the server & configuring it)
	routes/index.js (how to direct people to the correct html file and create API calls)
	views (contains all template files; this will be explained later on)
	public (the root directory for any access to a resource)


------------------------------------
WHAT IS AN API?

An API is just a call to a process with an input and output. It's not much different from a function. The only thing about APIs is that it allows you to only worry about input/output. You don't have to care what's going behind the scenes. It's basically a Black Box. You can only see what goes in and what comes out.

for example if I had this function:

int giveMeZero(int someNumber) {
	// do something
	return 0
}

This is what would be published on an API provider's website. They will only tell you what to give them and what they give you back. They ABSOLUTELY would not tell you what it is doing behind the scenes or it would create a security risk.

There both public and private APIs

public APIs are those functions that you can see into. For example, all libraries have documentations of their functions which are also APIs. You can see the code going into it.

Private APIs (like Google's) are not viewable AT ALL. You can only view the input/output and nothing else.

------------------------------------

How APIs are accessed:

On webservers, APIs are accessed through links.

For example if you could get an array of SINGLE DIGIT numbers every time you go to

somewebsite.com/givemearraywith/<somenumbers>

and you issued a request to:
somewebsite.com/givemearraywith/012345689

the server will parse the url and figure out from
'givemearraywith'
that you need an array with
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
in it.

the server would then build the array and give you
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

This would be the GET request version because you can't give the server any data in POST.
The URL itself would tell the server what information you actually need and then the server would do some processing before it gives you the data.



Let's say you wanted a POST version of the same request. If you had to build the api you would only need
somewebsite.com/givemearraywith/

Since in a POST request, you can give the server data about what you wanted, you could specify what you want in POST request.
Let's be more specific about what the server needs and does now to explain what's going on.

	The server needs a an array with numbers in string format.
	The server will give you an array in number format.


So you would issue a POST request with:
	/* DISCLAIMER: THIS IS JUST AN EXAMPLE OF HOW IT WORKS, NOT HOW IT IS USED IN REAL WORKING CODE */
	url: somewebsite.com/givemearraywith/
	data: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
 	contentType: array (this lets server know you are sending it an array)

(check out upload.ejs for the similarity in the POST request, I'll be explaining AJAX right after).


WHAT HAPPENS IN REALITY:

You can give a server anything you want in POST. However, when building your own API on the server you never know what data type from what language it will be from. How would you parse a JSON (JavaScript Object Notation) from JavaScript if your server is running Python? There are ways to do this but we want to keep things simple. That's why we chose to use the same language (JavaScript) on both the back and front end. Whatever we send from the front-end will be exactly the same as it is on the backend. There's no need to do extra parsing.

Usually if your server-side language is not using JavaScript you can choose to add JSON support since the most requests are originally just strings. There are libraries that can parse strings of JSON.


all APIs we created are part of the routes/index.js file.

-------------------------------------

BUILDING API WITH EXPRESS

when building an API there are three parts that are given to us:
	request (or req)
	response (or res)
	next (idk what this even does)

the request is the HTTP request, you can view fields inside it
the response is the response object that will be sent out
	before it is sent you can modify it any way you want.

	to send it out you need to make a call to either
		res.send
		or
		res.render (give back an html page that will be displayed; I talk about this more later in EJS vs HTML)

------------------------------------


WHAT IS AJAX?

Let's backtrack a bit.

XMLHttpRequest is the object for the HTTP request in the browser.
AJAX is basically just a wrapper that will build the XMLHttpRequest for you.
You could technically build the XMLHttpRequest object yourself but it's too time consuming.


This AJAX request is part of a VERY popular library for JavaScript called jQuery (which adds in WAY more than just request wrapper)
All jQuery functions begin with '$'
That's why in 'upload.ejs' I made a call to $.ajax function
You have to give the ajax function a JSON object which is just a big dictionary/mapping of key-value pairs and it will build the HTTP request for you AND send it off.


-------------------------------------

How normal (static) websites (without APIs) work:

Every single time you go to a website link (e.g. facebook.com) you issue an HTTP GET Request for an HTML document. When you enter this link into your browser's address bar the server sees you trying to access:

somewebsite.com

but the thing is that the server itself IS somewebsite.com because it hosts all the files for the website.
so what it actually sees it you trying to access the root directory or '/'

by convention access to '/' refers to index.html

index.html is only one that's special (this can be altered by an .htaccess file but you don't need to know that right now)

these two links are equivalent:

vietdaitran.com
vietdaitran.com/index.html

(try it yourself)

You might be wondering why you can't do this with github.com and github.com/index.html
It's because github is a website that serves pages dynamically via API, just like our application!






Let's make another note here about how '/' or root directory works. To the outside world of the server, you cannot actually see the file structure. On the server we have the 'public' folder and that is set as the public root directory (what the public can see and how it accesses files).

Let's say we wanted to access

somewebsite.com/image.jpg

and it also set up its server the same way we did.
in reality you are technically accessing:

somewebsite.com/public/image.jpg

The server just hid the fact that it has the public folder from you because it is set as the root directory. This is to protect files like index.js (our API file) from being seen. What if you wrote a login system and left a vulnerability in index.js?

If '/' referred to the actual root folder of our project you would be able to go to
somewebsite.com/routes/index.js
and see how the login system worked and then exploit the login system.

however, because our 'public' folder is our root directory, attempting such an act would actually be accessing
somewebsite/public/routes/index.js
and we can see that the 'public' folder does not even have the routes folder for that matter.

because '/' refers to project in this case, no one can touch the 'index.js' through links
(there are still security vulnerabilities, we just stopped one sing vulnerability by making the '/' actually access 'public')


-------------------------------------

WHAT IS EJS? HOW IS IT DIFFERENT FROM HTML?

So if you've ever made an html webpage before you'd know that the webpage is static. You cannot make it change information dynamically according to a given context. For example if we had account data that we needed to give it, it would not know how to change itself to make it hold the account information.

If everybody wanted to view their profile page, we would have to add every single possible profile page to our server as an html file and edit the html file whenever someone makes a change. That would incredibly time consuming, difficult, and would waste a ton of storage page.




Using EJS we can plug in values into an HTML file instead.

When someone requests a link that needs specific information in it, the server will "render" the page essentially plugging in values and then turning it into an HTML file. We "plug" in these values in index.js in the render function and in the ejs file we specify where the values go and how


You might be wondering why we chose SPECIFICALLY EJS. There are other html templating file types such as pug. Well, pug requires learning new syntax (basically a new language). EJS allows us to REUSE the html file we made and just write javascript to plug in the values. Using pug you would have to rewrite the html file in a PUG equivalent. Let's also not mention that it's a preprocessor and some developers are not used to using preprocessors. This way we also don't have to learn a bunch of new languages and waste time. We can expand what we can do just by learning frontend languages (HTML, CSS, JavaScript).

-------------------------------------

OUR APPLICATION AND HOW IT WORKS:

 bin/www and app.js starts the server
 any call to a link will have it handled in index.js
 if it's a page that needs to be generated it will render the page from the 'views' folder
 if it's information that needs to be given we will send information back as a JSON file
